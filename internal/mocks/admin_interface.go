// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	models "github.com/iki-rumondor/sips/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// AdminRepoInterface is an autogenerated mock type for the AdminRepoInterface type
type AdminRepoInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: data
func (_m *AdminRepoInterface) Create(data interface{}) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: data, assoc
func (_m *AdminRepoInterface) Delete(data interface{}, assoc []string) error {
	ret := _m.Called(data, assoc)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, []string) error); ok {
		r0 = rf(data, assoc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Distinct provides a mock function with given fields: model, column, condition, dest
func (_m *AdminRepoInterface) Distinct(model interface{}, column string, condition string, dest *[]string) error {
	ret := _m.Called(model, column, condition, dest)

	if len(ret) == 0 {
		panic("no return value specified for Distinct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, string, *[]string) error); ok {
		r0 = rf(model, column, condition, dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DistinctProdiMahasiswa provides a mock function with given fields: prodiID, dest, column
func (_m *AdminRepoInterface) DistinctProdiMahasiswa(prodiID uint, dest *[]string, column string) error {
	ret := _m.Called(prodiID, dest, column)

	if len(ret) == 0 {
		panic("no return value specified for DistinctProdiMahasiswa")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, *[]string, string) error); ok {
		r0 = rf(prodiID, dest, column)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: data, condition
func (_m *AdminRepoInterface) Find(data interface{}, condition string) error {
	ret := _m.Called(data, condition)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string) error); ok {
		r0 = rf(data, condition)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindMahasiswaByAngkatan provides a mock function with given fields: tahun
func (_m *AdminRepoInterface) FindMahasiswaByAngkatan(tahun int) (*[]models.Mahasiswa, error) {
	ret := _m.Called(tahun)

	if len(ret) == 0 {
		panic("no return value specified for FindMahasiswaByAngkatan")
	}

	var r0 *[]models.Mahasiswa
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*[]models.Mahasiswa, error)); ok {
		return rf(tahun)
	}
	if rf, ok := ret.Get(0).(func(int) *[]models.Mahasiswa); ok {
		r0 = rf(tahun)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Mahasiswa)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(tahun)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPenggunaBy provides a mock function with given fields: column, value
func (_m *AdminRepoInterface) FindPenggunaBy(column string, value interface{}) (*models.Pengguna, error) {
	ret := _m.Called(column, value)

	if len(ret) == 0 {
		panic("no return value specified for FindPenggunaBy")
	}

	var r0 *models.Pengguna
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interface{}) (*models.Pengguna, error)); ok {
		return rf(column, value)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}) *models.Pengguna); ok {
		r0 = rf(column, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Pengguna)
		}
	}

	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(column, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindProdiMahasiswa provides a mock function with given fields: prodiID, dest, condition
func (_m *AdminRepoInterface) FindProdiMahasiswa(prodiID uint, dest *[]models.Mahasiswa, condition string) error {
	ret := _m.Called(prodiID, dest, condition)

	if len(ret) == 0 {
		panic("no return value specified for FindProdiMahasiswa")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, *[]models.Mahasiswa, string) error); ok {
		r0 = rf(prodiID, dest, condition)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindWithOrder provides a mock function with given fields: data, condition, order
func (_m *AdminRepoInterface) FindWithOrder(data interface{}, condition string, order string) error {
	ret := _m.Called(data, condition, order)

	if len(ret) == 0 {
		panic("no return value specified for FindWithOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, string) error); ok {
		r0 = rf(data, condition, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// First provides a mock function with given fields: data, condition
func (_m *AdminRepoInterface) First(data interface{}, condition string) error {
	ret := _m.Called(data, condition)

	if len(ret) == 0 {
		panic("no return value specified for First")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string) error); ok {
		r0 = rf(data, condition)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Truncate provides a mock function with given fields: tableName
func (_m *AdminRepoInterface) Truncate(tableName string) error {
	ret := _m.Called(tableName)

	if len(ret) == 0 {
		panic("no return value specified for Truncate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(tableName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: data, condition
func (_m *AdminRepoInterface) Update(data interface{}, condition string) error {
	ret := _m.Called(data, condition)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string) error); ok {
		r0 = rf(data, condition)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAdminRepoInterface creates a new instance of AdminRepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdminRepoInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AdminRepoInterface {
	mock := &AdminRepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
