// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	models "github.com/iki-rumondor/sips/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MahasiswaRepoInterface is an autogenerated mock type for the MahasiswaRepoInterface type
type MahasiswaRepoInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: data
func (_m *MahasiswaRepoInterface) Create(data interface{}) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateMahasiswa provides a mock function with given fields: _a0
func (_m *MahasiswaRepoInterface) CreateMahasiswa(_a0 *models.Mahasiswa) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateMahasiswa")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Mahasiswa) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMahasiswa provides a mock function with given fields: model
func (_m *MahasiswaRepoInterface) DeleteMahasiswa(model *models.Mahasiswa) error {
	ret := _m.Called(model)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMahasiswa")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Mahasiswa) error); ok {
		r0 = rf(model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMahasiswaPengguna provides a mock function with given fields: data
func (_m *MahasiswaRepoInterface) DeleteMahasiswaPengguna(data *[]models.Mahasiswa) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMahasiswaPengguna")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]models.Mahasiswa) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: data, condition, order
func (_m *MahasiswaRepoInterface) Find(data interface{}, condition string, order string) error {
	ret := _m.Called(data, condition, order)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, string) error); ok {
		r0 = rf(data, condition, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllMahasiswa provides a mock function with given fields: condition
func (_m *MahasiswaRepoInterface) FindAllMahasiswa(condition string) (*[]models.Mahasiswa, error) {
	ret := _m.Called(condition)

	if len(ret) == 0 {
		panic("no return value specified for FindAllMahasiswa")
	}

	var r0 *[]models.Mahasiswa
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*[]models.Mahasiswa, error)); ok {
		return rf(condition)
	}
	if rf, ok := ret.Get(0).(func(string) *[]models.Mahasiswa); ok {
		r0 = rf(condition)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Mahasiswa)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(condition)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindBy provides a mock function with given fields: tableName, column, value
func (_m *MahasiswaRepoInterface) FindBy(tableName string, column string, value interface{}) (map[string]interface{}, error) {
	ret := _m.Called(tableName, column, value)

	if len(ret) == 0 {
		panic("no return value specified for FindBy")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, interface{}) (map[string]interface{}, error)); ok {
		return rf(tableName, column, value)
	}
	if rf, ok := ret.Get(0).(func(string, string, interface{}) map[string]interface{}); ok {
		r0 = rf(tableName, column, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, interface{}) error); ok {
		r1 = rf(tableName, column, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLimit provides a mock function with given fields: data, condition, order, limit
func (_m *MahasiswaRepoInterface) FindLimit(data interface{}, condition string, order string, limit int) error {
	ret := _m.Called(data, condition, order, limit)

	if len(ret) == 0 {
		panic("no return value specified for FindLimit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, string, int) error); ok {
		r0 = rf(data, condition, order, limit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindMahasiswaByUuid provides a mock function with given fields: uuid
func (_m *MahasiswaRepoInterface) FindMahasiswaByUuid(uuid string) (*models.Mahasiswa, error) {
	ret := _m.Called(uuid)

	if len(ret) == 0 {
		panic("no return value specified for FindMahasiswaByUuid")
	}

	var r0 *models.Mahasiswa
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Mahasiswa, error)); ok {
		return rf(uuid)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Mahasiswa); ok {
		r0 = rf(uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Mahasiswa)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMahasiswaPercepatan provides a mock function with given fields: data, prodiID, limit, order
func (_m *MahasiswaRepoInterface) FindMahasiswaPercepatan(data *[]models.Mahasiswa, prodiID uint, limit int, order string) error {
	ret := _m.Called(data, prodiID, limit, order)

	if len(ret) == 0 {
		panic("no return value specified for FindMahasiswaPercepatan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]models.Mahasiswa, uint, int, string) error); ok {
		r0 = rf(data, prodiID, limit, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// First provides a mock function with given fields: data, condition
func (_m *MahasiswaRepoInterface) First(data interface{}, condition string) error {
	ret := _m.Called(data, condition)

	if len(ret) == 0 {
		panic("no return value specified for First")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string) error); ok {
		r0 = rf(data, condition)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FirstOrCreate provides a mock function with given fields: dest, model
func (_m *MahasiswaRepoInterface) FirstOrCreate(dest interface{}, model interface{}) error {
	ret := _m.Called(dest, model)

	if len(ret) == 0 {
		panic("no return value specified for FirstOrCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}) error); ok {
		r0 = rf(dest, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Truncate provides a mock function with given fields: tableName
func (_m *MahasiswaRepoInterface) Truncate(tableName string) error {
	ret := _m.Called(tableName)

	if len(ret) == 0 {
		panic("no return value specified for Truncate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(tableName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateKelas provides a mock function with given fields:
func (_m *MahasiswaRepoInterface) UpdateKelas() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UpdateKelas")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMahasiswa provides a mock function with given fields: model
func (_m *MahasiswaRepoInterface) UpdateMahasiswa(model *models.Mahasiswa) error {
	ret := _m.Called(model)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMahasiswa")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Mahasiswa) error); ok {
		r0 = rf(model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePengaturan provides a mock function with given fields: model
func (_m *MahasiswaRepoInterface) UpdatePengaturan(model *[]models.Pengaturan) error {
	ret := _m.Called(model)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePengaturan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]models.Pengaturan) error); ok {
		r0 = rf(model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePercepatan provides a mock function with given fields:
func (_m *MahasiswaRepoInterface) UpdatePercepatan() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UpdatePercepatan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMahasiswaRepoInterface creates a new instance of MahasiswaRepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMahasiswaRepoInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MahasiswaRepoInterface {
	mock := &MahasiswaRepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
